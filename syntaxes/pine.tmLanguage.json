{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Pine Script",
  "patterns": [
    {
      "match": "//.*",
      "name": "comment.pine"
    },
    {
      "include": "#string"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#functionCall"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#invalid"
    }
  ],
  "repository": {
    "string": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.pine"
            }
          },
          "end": "\"",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.pine"
            }
          },
          "name": "string.quoted.double.pine",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escaped.pine"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.pine"
            }
          },
          "end": "'",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.pine"
            }
          },
          "name": "string.quoted.double.pine",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escaped.pine"
            }
          ]
        }
      ]
    },
    "boolean": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.pine",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.pine",
          "match": "\\bfalse\\b"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.pine",
          "match": "\\b(?:\\d+(?:\\.\\d+)?)\\b"
        },
        {
          "name": "constant.numeric.integer.pine",
          "match": "\\b\\d+\\b"
        }        
      ]
    },
    "literals": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        }
      ]
    },
    "paramSeparator": {
      "name": "punctuation.separator.parameter.pine",
      "match": ","
    },
    "functionParam": {
      "patterns": [
        {
          "name": "variable.parameter.pine",
          "begin": "(?<=(?:\\(|,|^)\\s*)(((?:(?:simple|series)\\s+)?((int|float|string|bool)|(array|label|line)))(?:\\s+))?(\\w+)\\s*(=)\\s*",
          "beginCaptures": {
            "2": {
              "name": "meta.type.annotation.pine"
            },
            "4": {
              "name": "support.type.primitive.pine"
            },
            "5": {
              "name": "support.type.builtin.pine"
            },
            "6": {
              "name": "meta.definition.variable.name.pine"
            },
            "7": {
              "name": "keyword.operator.assignment.pine"
            }
          },
          "patterns": [
            {
              "include": "#literals"
            },
            {
              "include": "constants"
            },
            {
              "include": "#paramSeparator"
            }
          ],
          "end": "(?=\\s*(?:$|,|\\)))"
        },
        {
          "name": "variable.parameter.pine",
          "match": "(?<=(?:\\(|,|^)\\s*)(((?:(?:simple|series)\\s+)?((int|float|string|bool)|(array|label|line)))(?:\\s+))?(\\w+)(?=\\s*(?:$|,|\\)))",
          "captures": {
            "2": {
              "name": "meta.type.annotation.pine"
            },
            "4": {
              "name": "support.type.primitive.pine"
            },
            "5": {
              "name": "support.type.builtin.pine"
            },
            "6": {
              "name": "meta.definition.variable.name.pine"
            }
          }
        }
      ]
    },
    "functionCallParam": {
      "patterns": [
        {
          "include": "#literals"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#functionCall"
        },
        {
          "match": "(?<=\\s+|\\(\\s*|,\\s*)(\\w+)(?=\\s*=)",
          "captures": {
            "1" : {
              "name":"entity.name.variable.parameter"
            }
          }
        },
        {
          "name": "variable.other.readwrite.pine",
          "match": "\\w+"
        }
      ]
    },
    "functionParams": {
      "name": "meta.parameters.pine",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.pine"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.pine"
        }
      },
      "patterns": [
        {
          "include": "#functionParam"
        },
        {
          "include": "#paramSeparator"
        }
      ]
    },
    "functionCallParams": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.open.pine"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.pine.close.pine"
        }
      },
      "patterns": [
        {
          "include": "#functionCallParam"
        },
        {
          "include": "#paramSeparator"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "^\\s*(var)\\s+(\\w+)\\s*([+-:])?(=)?",
          "captures": {
            "1":{
              "name": "storage.type.pine"
            },
            "2": {
              "name": "variable.other.readwrite.pine"
            },
            "3": {
              "name": "invalid.pine"
            },
            "4": {
              "name": "keyword.operator.assignment.pine"
            }
          }
        },
        {
          "name": "meta.var.expr.pine",
          "match": "^\\s*((var)\\s+)?((int|float|string|bool)\\s+)?(\\w+)\\s+(=)",
          "captures": {
            "2": {
              "name": "storage.type.pine"
            },
            "4": {
              "name": "support.type.primitive.pine"
            },
            "5": {
              "name": "variable.other.readwrite.pine"
            },
            "6": {
              "name": "keyword.operator.assignment"
            }
          }
        },
        {
          "name": "meta.var.expr.pine",
          "match": "^\\s*((var)\\s+)?((array|label|line)\\s+)(\\w+)\\s+([+-:])?(=)",
          "captures": {
            "2": {
              "name": "storage.type.pine"
            },
            "4": {
              "name": "support.type.builtin.pine"
            },
            "5": {
              "name": "variable.other.readwrite.pine"
            },
            "6": {
              "name": "invalid.pine"
            },
            "7": {
              "name": "keyword.operator.assignment"
            }
          }
        },
        {
          "name": "meta.var.expr.pine",
          "match": "^\\s*((var)\\s+)?(int|float|string|bool)\\b(\\s+(\\w+))?",
          "captures": {
            "2": {
              "name": "storage.type.pine"
            },
            "3": {
              "name": "support.type.primitive.pine"
            },
            "5": {
              "name": "variable.other.readwrite.pine"
            }
          }
        },
        {
          "name": "meta.var.expr.pine",
          "match": "^\\s*((var)\\s+)?(array|label|line)\\b(?!\\.)(\\s+(\\w+))?",
          "captures": {
            "2": {
              "name": "storage.type.pine"
            },
            "3": {
              "name": "support.type.builtin.pine"
            },
            "5": {
              "name": "variable.other.readwrite.pine"
            }
          }
        },
        {
          "name": "storage.type.pine",
          "match": "^\\s*((var)\\b)"
        },
        {
          "match": "^\\s*(\\w+)\\s*([+-:]=)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.pine"
            },
            "2": {
              "name": "keyword.operator.assignment.pine"
            }
          }
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.pine",
          "match": "^\\s*(import)\\s+([^/]+/[^/]+/\\d+)(\\s+(as)\\s+(\\w+))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.control.pine"
            },
            "2": {
              "name": "expr.import.pine"
            },
            "4": {
              "name": "keyword.control.pine"
            },
            "5": {
              "name": "variable.other.readwrite.alias.pine"
            }
          }
        }
      ]
    },
    "functionCall": {
      "patterns": [
        {
          "name": "meta.function-call.pine",
          "begin": "(?<=(?:^|=)\\s*|\\w+\\.)(\\w+)(?=\\()",
          "beginCaptures": {
            "1": { "name": "entity.name.function" }
          },
          "end": "(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.definition.function.pine",
          "begin": "^((export)\\s+)?(\\w+)(?=\\()",
          "beginCaptures": {
            "2": { "name": "keyword.control.export.pine" },
            "3": { "name": "entity.name.function" }
          },
          "end": "(?<=\\))\\s*=>",
          "patterns": [
            {
              "include": "#functionParams"
            }
          ]
        }
      ]
    },
    "builtins":{
      "patterns": [
        {
          "name": "meta.function-call",
          "begin": "\\b(ta)(\\.)(alma|atr|bb|bbw|cci|cmo|cog|dmi|ema|hma|kc|kcw|linreg|macd|mfi|mom|rma|roc|rsi|sar|sma|stoch|supertrend|swma|tr|tsi|vwap|vwma|wma|wpr|barsince|change|correlation|cross|crossover|crossunder|cum|dev|falling|highest|highestbars|lowest|lowestbars|median|mode|percentile_linear_interpolation|percentile_nearest_rank|percentrank|pivothigh|pivotlow|range|rising|stdev|valuewhen|variance)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.ta.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.ta.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.ta.pine",
          "match": "\\b(ta)\\b"
        },
        {
          "match": "\\b(ta)(\\.)(accdist|iii|nvi|obv|pvi|pvt|tr|vwap|wad|wvad)\\b",
          "captures": {
            "1" : { "name" : "support.constant.ta.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.constant.property.ta.pine" }
          }
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(math)(\\.)(abs|acos|cos|asin|sin|atan|tan|ceil|floor|exp|log|log10|round_to_mintick|sign|sqrt|avg|max|min|pow|random|round|sum|todegrees|toradians)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.math.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.math.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },        
        {
          "name": "support.constant.math.pine",
          "match": "\\b(math)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(str)(\\.)(tostring|tonumber)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.str.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.str.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.str.pine",
          "match": "\\b(str)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(ticker)(\\.)(heikinashi|kagi|linebreak|pointfigure|renko|new)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.ticker.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.ticker.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.ticker.pine",
          "match": "\\b(ticker)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(request)(\\.)(financial|quandl|security|splits|dividends|earnings)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.request.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.request.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.request.pine",
          "match": "\\b(request)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(input)(\\.)(bool|int|float|string|color|timeframe|session|source|symbol|time)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.input.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.input.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.input.pine",
          "match": "\\b(input)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(strategy)(\\.)(risk)(\\.)(allow_entry_in|max_cons_loss_days|max_drawdown|max_intraday_filled_orders|max_intraday_loss|max_position_size)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.strategy.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.constant.strategy.risk.pine" },
            "4" : { "name" : "punctuation.accessor.pine" },
            "5" : { "name" : "support.function.strategy.risk.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(strategy)(\\.)(cancel|cancel_all|close|close_all|entry|exit|order)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.strategy.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.strategy.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.strategy.pine",
          "match": "\\b(strategy)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(line)(\\.)(delete|get_price|get_x1|get_x2|get_y1|get_y2|new|set_color|set_extend|set_style|set_width|set_x1|set_x2|set_xloc|set_xy1|set_xy2|set_y1|set_y2)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.line.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.line.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.line.pine",
          "match": "\\b(line)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(label)(\\.)(delete|get_text|get_x|get_y|new|set_color|set_size|set_text|set_textalign|set_textcolor|set_tooltip|set_x|set_xloc|set_xy|set_y|set_yloc)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.label.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.label.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.label.pine",
          "match": "\\b(label)\\b"
        },
        {
          "name": "meta.function-call",
          "begin": "\\b(array)(\\.)(avg|clear|concat|copy|covariance|fill|get|includes|indexof|insert|lastindexof|max|median|min|mode|new_bool|new_color|new_float|new_int|pop|push|remove|reverse|set|shift|size|slice|sort|standardize|stdev|sum|unshift|variance)(?=\\()",
          "beginCaptures": {
            "1" : { "name" : "support.constant.array.pine" },
            "2" : { "name" : "punctuation.accessor.pine" },
            "3" : { "name" : "support.function.array.pine" }
          },
          "end":"(?<=\\))",
          "patterns": [
            { "include": "#functionCallParams" }
          ]
        },
        {
          "name": "support.constant.array.pine",
          "match": "\\b(array)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(bar_index|close|dayofmonth|dayofweek|high|hl2|hlc3|hour|low|minute|month|na|nvi|obv|ohlc4|open|second|time|time_close|timenow|volume|weekofyear|year)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(timeframe)\\.(isdaily|isdwm|isintraday|isminutes|ismonthly|isseconds|isweekly|multiplier|period)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(syminfo)\\.(basecurrency|currency|description|mintick|pointvalue|prefix|root|session|ticker|tickerid|timezone|type)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(dayofweek)\\.(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(plot)\\.style_(area|areabr|circles|columns|cross|histogram|line|linebr|stepline)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(location)\\.(abovebar|belowbar|top|bottom|absolute)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(shape)\\.(arrowdown|arrowup|circle|cross|diamond|flag|labeldown|labelup|square|triangledown|triangleup|xcross)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(color)\\.(aqua|black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|orange)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(currency)\\.(AUD|CAD|CHF|EUR|GBP|HKD|JPY|NOK|NONE|NZD|RUB|SEK|SGD|TRY|USD|ZAR)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(barmerge)\\.(gaps_off|gaps_on|lookahead_off|lookahead_on)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(barstate)\\.(isconfirmed|isfirst|ishistory|islast|isnew|isrealtime)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(adjustment)\\.(dividends|none|splits)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(display)\\.(all|none)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(extend)\\.(both|left|none|right)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(format)\\.(inherit|price|volume)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(hline)\\.style_(dashed|dotted|solid)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(input)\\.(bool|color|float|integer|resolution|session|source|string|symbol)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(label)\\.style_(arrowdown|arrowup|circle|cross|diamond|flag|label_center|label_down|label_left|label_lower_left|label_lower_right|label_right|label_up|label_upper_left|label_upper_right|none|square|triangledown|triangleup|xcross)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(line)\\.style_(arrow_both|arrow_left|arrow_right|dashed|dotted|solid)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(order)\\.(ascending|descending)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(scale)\\.(left|right|none)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(session)\\.(extended|regular)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(size)\\.(auto|huge|large|normal|small|tiny)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(strategy)\\.(cash|closedtrades|equity|eventrades|fixed|grossloss|grossprofit|initial_capital|long|losstrades|max_drawdown|netprofit|openprofit|opentrades|percent_of_equity|position_avg_price|position_entry_name|position_size|short|wintrades)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(strategy)\\.commission\\.(cash_per_contract|cash_per_order|percent)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(strategy)\\.direction\\.(all|long|short)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(strategy)\\.max_contracts_held_(all|long|short)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(strategy)\\.oca\\.(cancel|none|reduce)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(text)\\.align_(center|left|right)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(xloc)\\.(bar_index|bar_time)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "\\b(yloc)\\.(abovebar|belowbar|price)\\b",
          "name": "constant.language.pine"
        },
        {
          "match": "#[a-fA-F0-9]{6}",
          "name": "constant.support.pine"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "\\-|\\+|\\*|/|%",
          "name": "keyword.operator.arithmetic.pine"
        },
        {
          "match": "==|!=|<=|>=|<|>",
          "name": "keyword.operator.comparison.pine"
        },
        {
          "match": "\\?|\\:",
          "name": "keyword.operator.ternary.pine"
        },
        {
          "match": "\\b(and|or|not)\\b",
          "name": "keyword.operator.logical.pine"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.pine"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.pine",
          "match": "\\b(if|else|while|for|return)\\b"
        }
      ]
    },
    "invalid": {
      "patterns": [
        {
          "name":"invalid.pine",
          "match":";\\s*$"
        }
      ]
    }
  },
  "scopeName": "source.pine"
}